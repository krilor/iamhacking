<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I am hacking</title>
    <link>https://krilor.github.com/iamhacking/</link>
    <description>Recent content on I am hacking</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 26 Jul 2020 22:14:00 +0200</lastBuildDate>
    
	<atom:link href="https://krilor.github.com/iamhacking/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Encoding and Ciphers in Bash</title>
      <link>https://krilor.github.com/iamhacking/posts/encoding-and-ciphers-in-bash/</link>
      <pubDate>Sun, 26 Jul 2020 22:14:00 +0200</pubDate>
      
      <guid>https://krilor.github.com/iamhacking/posts/encoding-and-ciphers-in-bash/</guid>
      <description>Today I want to explore encoding and ciphers in bash, and how to convert between different kinds. I&amp;rsquo;ve choosen bash because I like being able to just test stuff directly in my terminal.
To start off, I did a bit of google-foo and found a couple of resources to figure out what my scope would be.
I found these, which are ok posts/resources about the topic.
 https://medium.com/disruptive-labs/a-quick-primer-on-encoding-decoding-for-security-folks-a021afd98fbe https://www.dcode.fr/en  Scope Encodings From the resources listes, I have picked out these encodings that I will work with.</description>
    </item>
    
    <item>
      <title>Wireshark for network traffic</title>
      <link>https://krilor.github.com/iamhacking/posts/wireshark/</link>
      <pubDate>Sat, 25 Jul 2020 12:03:28 +0200</pubDate>
      
      <guid>https://krilor.github.com/iamhacking/posts/wireshark/</guid>
      <description>I wanted to take Wireshark for a spin. Wireshark lets you see whatâ€™s happening on your network at a microscopic level and is the de facto standard for network protocol analysis.
Installation was pretty straight forward. Just unstalled the Ubuntu packages wireshark (GUI) and tshark (CLI), then followed this thread to set up non-root access for myself.
Testing Testing it was pretty straigh forward. Just fire it up and inspect the network packages as I browse the internet.</description>
    </item>
    
    <item>
      <title>Taking John The Ripper for a spin</title>
      <link>https://krilor.github.com/iamhacking/posts/john-the-ripper/</link>
      <pubDate>Fri, 24 Jul 2020 21:40:00 +0200</pubDate>
      
      <guid>https://krilor.github.com/iamhacking/posts/john-the-ripper/</guid>
      <description>It is time time to give John The Ripper as spin (further referred to as simpy &amp;ldquo;John&amp;rdquo;). It is a open-source password cracker similar to hashcat from the previous post.
First, we need to install it. There are three versions to choose from.
 PRO - distributed primarily in the form of &amp;ldquo;native&amp;rdquo; packages for the target operating systems and in general is meant to be easier to install. Not free.</description>
    </item>
    
    <item>
      <title>Testing hashcat</title>
      <link>https://krilor.github.com/iamhacking/posts/testing-hashcat/</link>
      <pubDate>Wed, 22 Jul 2020 22:30:00 +0200</pubDate>
      
      <guid>https://krilor.github.com/iamhacking/posts/testing-hashcat/</guid>
      <description>So, this time around I will give hashcat a spin.
Had a bit of trouble getting started. The install was easy enough, just download, unarchive and put a symlink in path, but installing required OpenCL took me a while. Or, actually, just figuring out what the heck I had to install was the hard part.
I&amp;rsquo;m on a ThinkPad X1 with integrated Intel grahics, so I had to install OpenCL Runtimes for Intel Processors.</description>
    </item>
    
    <item>
      <title>Using findmyhash to crack a password</title>
      <link>https://krilor.github.com/iamhacking/posts/find-my-hash/</link>
      <pubDate>Mon, 20 Jul 2020 21:06:00 +0200</pubDate>
      
      <guid>https://krilor.github.com/iamhacking/posts/find-my-hash/</guid>
      <description>This time around I will test findmyhash to crack a known password hash. Findmyhash is as tool that uses online services to search for the value of a hash. The online services has pre-computed hash values that are searched through, so-called &amp;ldquo;raindow tables&amp;rdquo;
Note: I&amp;rsquo;ve installed findmyhash.py as findmyhash and added a hashbang so I can call it directly.
findmyhash /usr/bin/findmyhash 1.1.2 ( http://code.google.com/p/findmyhash/ ) Usage: ------ python /usr/bin/findmyhash &amp;lt;algorithm&amp;gt; OPTIONS Accepted algorithms are: ------------------------ MD4 - RFC 1320 MD5 - RFC 1321 SHA1 - RFC 3174 (FIPS 180-3) SHA224 - RFC 3874 (FIPS 180-3) SHA256 - FIPS 180-3 SHA384 - FIPS 180-3 SHA512 - FIPS 180-3 RMD160 - RFC 2857 GOST - RFC 5831 WHIRLPOOL - ISO/IEC 10118-3:2004 LM - Microsoft Windows hash NTLM - Microsoft Windows hash MYSQL - MySQL 3, 4, 5 hash CISCO7 - Cisco IOS type 7 encrypted passwords JUNIPER - Juniper Networks $9$ encrypted passwords LDAP_MD5 - MD5 Base64 encoded LDAP_SHA1 - SHA1 Base64 encoded NOTE: for LM / NTLM it is recommended to introduce both values with this format: python /usr/bin/findmyhash LM -h 9a5760252b7455deaad3b435b51404ee:0d7f1f2bdeac6e574d6e18ca85fb58a7 python /usr/bin/findmyhash NTLM -h 9a5760252b7455deaad3b435b51404ee:0d7f1f2bdeac6e574d6e18ca85fb58a7 Valid OPTIONS are: ------------------ -h &amp;lt;hash_value&amp;gt; If you only want to crack one hash, specify its value with this option.</description>
    </item>
    
    <item>
      <title>Using python to crack a (known) password hash</title>
      <link>https://krilor.github.com/iamhacking/posts/python-based-password-cracking/</link>
      <pubDate>Mon, 20 Jul 2020 10:56:24 +0200</pubDate>
      
      <guid>https://krilor.github.com/iamhacking/posts/python-based-password-cracking/</guid>
      <description>It probably makes sense to crack passwords using tools such as hashcat, john the ripper or findmyhash, but today I&amp;rsquo;m gonna have a stab at brute-forcing a hash using python.
To start out, I made a md5 hash on the command line
echo -n &amp;#34;1234&amp;#34; | md5sum The password is 1234 The resulting hash is: 81dc9bdb52d04dc20036dbd8313ed055.
NOTE: md5 is not a hasing algorithm that should be used to hash passwords - use bcrypt or Argon2 or at the very least a shaN with salt and a lot of iteration.</description>
    </item>
    
    <item>
      <title>Hugo &#43; Jupyter</title>
      <link>https://krilor.github.com/iamhacking/posts/hugo-and-jupyter/</link>
      <pubDate>Mon, 20 Jul 2020 10:04:24 +0200</pubDate>
      
      <guid>https://krilor.github.com/iamhacking/posts/hugo-and-jupyter/</guid>
      <description>k = 8 print(k) 8  Markdown This shows it&amp;rsquo;s possible to use jupyter to create content for Hugo.</description>
    </item>
    
    <item>
      <title>Ready to GO</title>
      <link>https://krilor.github.com/iamhacking/posts/ready-to-go/</link>
      <pubDate>Mon, 20 Jul 2020 09:24:24 +0200</pubDate>
      
      <guid>https://krilor.github.com/iamhacking/posts/ready-to-go/</guid>
      <description>I&amp;rsquo;m setting up this blog/journal repo to document things I explore and learn when dipping my toes into cyber security.</description>
    </item>
    
  </channel>
</rss>